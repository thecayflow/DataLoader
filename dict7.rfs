
import itertools, csv
from itertools import chain

#Info ver
scene.executeCommand(120150)
scene.message("\n" + "                                      ############     Ver. 0.1.7\n" + "                                      ###  OHANA  ###     by Víctor Sánchez\n" + "                                      ############     Madrid, 2018\n")

#Open up form to retrieve user defined values
form = GUIFormDialog.new()
form.setTitle("User defined Values")

form.addBoolField("Fast mode (low verbosity)", True)
form.addBoolField("Calendar", True)
form.addBoolField("Build Panorama", True)
form.addBoolField("Floor", True)
form.addListField("CSV Format", ["Excel", "Numbers"], 0)

if (form.show() == GUI_DIALOG_ACCEPTED):

	# Get form user-defined values
	fastMode = form.getFieldValue("Fast mode (low verbosity)")
	cal = form.getFieldValue("Calendar")
	pano = form.getFieldValue("Build Panorama")
	floor = form.getFieldValue("Floor")
	fileFormat = form.getFieldValue("CSV Format")

	# DATASET BUILD
	# Show dialog browsing for a file to open with .txt or .csv extension.
	dlg = GUIFilePickerDialog.new()
	filePath = dlg.show( FILE_PICKER_LOAD, "/Users/victor/Desktop/data.csv", "*.csv;*.txt", "Load data" )

else:
	scene.message("Canceled by user")

if pano==True:
	PanoForm = GUIFormDialog.new()
	PanoForm.setTitle("Set Panorama Values")
	PanoForm.addFloatField("Set Panorama speed", 0.0)
	if (PanoForm.show() == GUI_DIALOG_ACCEPTED):
		PanoSpeed = PanoForm.getFieldValue("Set Panorama speed")
		#normalize PanoSpeed (-50/+50 to 0.1/10)
		PanoSpeedN = (PanoSpeed+55.555)/55.555

else:
	scene.message("Canceled by user")

#if calendar is enabled, load the scene with prepared geo for days/months
if cal==True:
	scene.load("C:/Users/vsanchez/Documents/realflow/scenes/test/calendar.flw")
else:
	scene.load("C:/Users/vsanchez/Documents/realflow/scenes/test/blank.flw")

#read values from selected file
scene.message("Loading data... please wait")

#set delimiter according to file format
if fileFormat==0:
	userdelim=";"
else:
	userdelim=","

with open (str(filePath), 'r')  as f:
  #get rid of header:
	rawdata=csv.reader(f, delimiter=userdelim)
	rawdata.next()
	
	data = list(rawdata)

worksheet = {a:[list(filter(None, map(float, c))) 
   for c in zip(*map(lambda x:x[1:], list(b)))]  
     for a, b in itertools.groupby(sorted(data, key=lambda x:x[0]), key=lambda x:x[0])
}

scene.message("Data succesfully loaded.\n.............................................................................................")

#find out the days number:
daysNum=len(worksheet)

#COLOR
#prepare colors according to rows count
initColor=[215,84,26]
endColor=[76,224,220]
palette=[]

#find out the series number (to generate according number of shades)
seriesNum=len(worksheet[[k for k in worksheet.keys() if worksheet[k]==max(worksheet.values(),key=len)][0]])

#get separate R,G,B values
initR,initG,initB = initColor[0],initColor[1],initColor[2]
endR,endG,endB = endColor[0],endColor[1],endColor[2]

#Generate color palette:
if seriesNum > 2:

	for v in range(0,seriesNum-1):
		degR=initR+(((endR-initR)/seriesNum)*v)
		degG=initG+(((endG-initG)/seriesNum)*v)
		degB=initB+(((endG-initG)/seriesNum)*v)

		palette.append(Vector.new(degR,degG,degB))
		
		#always set the endColor at the end of palette:
		if v == (seriesNum-2):
			palette.append(Vector.new(endR,endG,endB))

elif seriesNum <= 2:
	palette.append(Vector.new(initR,initG,initB))
	palette.append(Vector.new(endR,endG,endB))

#GEO
#Create as many lists as day/series: GEO=[DAY[SERIE[ACTIVITY]]...] 
#for both geo objects & for their scales
geo = [[[]for j in range(seriesNum)] for i in range(len(worksheet))]
geoScales = [[[]for j in range(seriesNum)] for i in range(len(worksheet))]

if fastMode==True:
	scene.enable_GUI_updates(False)
else:
	scene.enable_GUI_updates(True)

#init percents display vars
Percents=[]
lenPercents=len(Percents)
activitiesDone=0
milestone=10

#find out actitivies count (excluding value == 0.0)
activitiesNum=sum(len(list(filter(None, chain.from_iterable(v)))) for v in worksheet.values())

scene.message("Initializing " + str(activitiesNum) + " activities")

#k = day; v= serie
dayindex=0
serieindex=0
xpos=0.0 #valid for first date activity only
for k, v in sorted(worksheet.iteritems()):
	
	lifter=0
	zpos=0
	palette_i=0

	for serie in v:
		
		for item in serie:
			#item=scale value
			activity=scene.addSphere(2)
			activity.setParameter("Scale", Vector.new(item, item, item))
			if len(serie)>1:
				activity.setParameter("Position", Vector.new(xpos, lifter+(float(item)/2), zpos))
				lifter+=(item)
				activity.setParameter("Color", palette[palette_i])
				
			else:
				lifter=0
				activity.setParameter("Position", Vector.new(xpos, float(item)/2, zpos))
				activity.setParameter("Color", palette[palette_i])
			
			geo[dayindex][serieindex].append(activity)
			geoScales[dayindex][serieindex].append(item)
			
			#display percent:
			activitiesDone+=1
			activitiesPercent= (float(activitiesDone)*100)/activitiesNum
			if activitiesPercent > milestone and len(Percents)==lenPercents and fastMode==False:
				scene.message("Activities in progress... " + str(milestone) + "% is done.")
				Percents.append(10)
				milestone+=10
				lenPercents+=1
		lifter=0
		zpos+=10
		palette_i+=1
		serieindex+=1
	xpos+=5	
	serieindex=0
	dayindex+=1
scene.message("Activities in progress... 100% is done.\n.............................................................................................")

#SNAP
#horizontally (xpos)
scene.message("Snapping to grid...")

#find max scale per day
flatGeoScales=[[item for subsublist in sublist for item in subsublist] for sublist in geoScales]

maxDailyScales=[]
for reg in flatGeoScales:
	if len(reg)>0:
		maxDailyScales.append(max(reg))
	else:
		#add 0 if no value for that day/serie:
		maxDailyScales.append(0)

#snapped X positions list: snapped x position = previous xpos + previous radius + current radius
snapXposL = []
preXpos=0.0

ind=0
for item in maxDailyScales:
	if ind ==0:
		snapXpos = preXpos + float(item)/2
	else:
		snapXpos = preXpos + float(maxDailyScales[ind-1])/2 + float(item)/2
		if (snapXpos - snapXposL[ind-1]) < 3.0 and cal == True:
			snapXpos = snapXposL[ind-1] + 3.0

	snapXposL.append(snapXpos)
	ind+=1
	preXpos=snapXpos

preXpos=0.0

#set snapped x to each activity per day (horizontal snap)
ind=0
for day in geo:
	snapXpos=snapXposL[ind]
	for serie in day:
		for activity in serie:
			activity.setParameter("Position.X", snapXpos)
	ind+=1

#vertically (zpos)
#find max scale per serie (zpos)
maxSerieScales=[]
for maxscale in range(seriesNum):
	maxSerieScales.append(max([ f[maxscale] for f in geoScales])[0])

#snapped Z positions list: snapped z position = all previous diameters + current radius
snapZposL = []
diameters=0.0

ind=0
for item in maxSerieScales:
	snapZpos = diameters + float(item)/2
	snapZposL.append(snapZpos)
	ind+=1
	diameters=sum(maxSerieScales[0:ind])

#set snapped z to each activity per serie (vertical snap)
ind=0
for _ in range (seriesNum):	
	serieList = [ f[_] for f in geo ]
	flattened = [val for sublist in serieList for val in sublist]
	for activity in flattened:
		activity.setParameter("Position.Z", -(snapZposL[ind]))
	ind+=1
scene.message("Successful snapping\n.............................................................................................")

#CALENDAR

if cal==True:
	scene.message("Calendar is enabled")
	#build lists with sorted days and months:
	monthNames=[]
	dayNames=[]
	yearNames=[]

	for k, v in sorted(worksheet.iteritems()):
		yearNames.append(k.split("-")[0])
		monthNames.append(int(k.split("-")[1]))
		dayNames.append(int(k.split("-")[2]))

	#init percents display vars
	percentDone=0
	milestone=10
	multiplier=1

	#build geo bases
	for marker in range(daysNum):
		#percents display
		if fastMode==False:
			if percentDone>0 and percentDone > (multiplier*milestone): 
				scene.message("Setting up Calendar... " + str(int(multiplier*milestone)) + "% is done.")
				multiplier+=1
			percentDone=percentDone+(50/daysNum)

		newMarkerRedBase = scene.addCube()
		newMarkerRedBase.setParameter("Scale", Vector.new(2.5, 0.2, 0.75))
		newMarkerRedBase.setParameter("Color", Vector.new(150, 0, 0))
		newMarkerRedBase.setParameter("Position", Vector.new(snapXposL[marker], 0, 0.375))

		newMarkerWhiteBase = scene.addCube()
		newMarkerWhiteBase.setParameter("Scale", Vector.new(2.5, 0.1, 1.75))
		newMarkerWhiteBase.setParameter("Color", Vector.new(242, 242, 242))
		newMarkerWhiteBase.setParameter("Position", Vector.new(snapXposL[marker], -0.025, 1.625))

	#days setup
	dayGeos=[d01,d02,d03,d04,d05,d06,d07,d08,d09,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25,d26,d27,d28,d29,d30,d31]

	for item in range(len(dayNames)):
		#percents display
		if fastMode==False:
			if percentDone > (multiplier*milestone): 
				scene.message("Setting up Calendar... " + str(int(multiplier*milestone)) + "% is done.")
				multiplier+=1
			percentDone=percentDone+(25/daysNum)

		if int(dayNames[item])<10:
			dayToCloneObj=eval("d0"+str(dayNames[item]))
		else:
			dayToCloneObj=eval("d"+str(dayNames[item]))
		
		dayToCloneObj.clone()
		scene.getObject("d"+str(len(dayGeos)+1)).setParameter("Position", Vector.new(snapXposL[item], 0.0, 1.625))
		scene.getObject("d"+str(len(dayGeos)+1)).setParameter("Rotation", Vector.new(-90.0, 0.0, 0.0))
		scene.getObject("d"+str(len(dayGeos)+1)).setParameter("Color", Vector.new(0,0,0))
		scene.getObject("d"+str(len(dayGeos)+1)).setParameter("Visible", True)
		dayGeos.append(eval("d"+str(len(dayGeos)+1)))

	#months setup
	monthGeos=[m01,m02,m03,m04,m05,m06,m07,m08,m09,m10,m11,m12]

	for item in range(len(monthNames)):
		#percents display
		if fastMode==False:
			if percentDone > (multiplier*milestone):
				scene.message("Setting up Calendar... " + str(int(multiplier*milestone)) + "% is done.")
				multiplier+=1
			percentDone=percentDone+(25/daysNum)

		if int(monthNames[item])<10:
			monthToCloneObj=eval("m0"+str(monthNames[item]))
		else:
			monthToCloneObj=eval("m"+str(monthNames[item]))
		
		monthToCloneObj.clone()
		scene.getObject("m"+str(len(monthGeos)+1)).setParameter("Position", Vector.new(snapXposL[item], 0.085, 0.375))
		scene.getObject("m"+str(len(monthGeos)+1)).setParameter("Rotation", Vector.new(-90.0, 0.0, 0.0))
		scene.getObject("m"+str(len(monthGeos)+1)).setParameter("Color", Vector.new(255,255,255))
		scene.getObject("m"+str(len(monthGeos)+1)).setParameter("Visible", True)
		monthGeos.append(eval("m"+str(len(monthGeos)+1)))

	scene.message("Setting up Calendar... 100% is done.\n.............................................................................................")

#PANORAMA

if pano==True:

	scene.message("Panorama in progress...")
	# set end and start points
	startO = snapXposL[0]
	endO = snapXposL[-1]

	#create focusObject to track and renderCam
	focusObject = scene.addNull()
	focObjZpos=(min(snapZposL)+max(snapZposL))/2
	focusObject.setParameter("Position", Vector.new(startO, 0.0, -focObjZpos))
	 

	renderCam=scene.addCamera()
	renderCam.setParameter("Position", Vector.new(startO, 0.0, 29))
	renderCam.setParameter("Link target", str(focusObject.getName()))
	renderCamX=renderCam.getParameter("Position").getX()

	#set renderCam as current camera
	scene.setCurrentCamera(renderCam.getName())

	# Set the simulation range
	LastFrame=int(snapXposL[-1]/PanoSpeedN)
	scene.setMaxFrames(LastFrame)
	scene.setEndFrame(LastFrame)
	simRange = scene.getMaxFrames() - scene.getMinFrame()

	indexCounter = 0
	curvePosX = focusObject.getParameterCurve("Position.X")
	xposFocObj=focusObject.getParameter("Position").getX()

	curvePosXCam = renderCam.getParameterCurve("Position.X")

	#init percents display vars
	Percents=[]
	lenPercents=len(Percents)
	milestone=10

	# Go through the total frames 
	for l in range(0, simRange):
 
    # Calculate the current time based on frame and FPS
    currentTime = float(indexCounter) / scene.getFps()
		
		#percents display
		percentCam = (float(indexCounter)*100)/float(simRange)
		if percentCam > milestone and len(Percents)==lenPercents and fastMode==False:
			scene.message("Setting up camera... " + str(milestone) + "% is done.")
			Percents.append(10)
			milestone=milestone+10
			lenPercents=lenPercents+1
 
		focusObject.setParameter("Position", Vector.new(xposFocObj, 5.0, -focObjZpos))
		renderCam.setParameter("Position", Vector.new(renderCamX, max(maxDailyScales), 29))

    # Add new keys for XYZ and define their values and key types at the current time
    keyX = Key.new()
    keyX.time = currentTime
    keyX.value = xposFocObj
    keyX.type = KEY_TYPE_TCB
 
		curvePosX.addKey(keyX)

		keyXcam = Key.new()
		keyXcam.time = currentTime
		keyXcam.value = renderCamX
		keyXcam.type = KEY_TYPE_TCB

		curvePosXCam.addKey(keyXcam)
 
    # Increment the counter
    indexCounter += 1
		xposFocObj+=(1*PanoSpeedN)
		renderCamX+=(1*PanoSpeedN)

	scene.message("Setting up camera... 100% is done.")

#FLOOR
if floor==True:
	floorGeo=scene.addPlane()
	floorGeoScaleX=snapXposL[-1]/10
	floorGeo.setParameter("Scale.X", floorGeoScaleX)
	floorGeo.setParameter("Scale.Z", (max(snapZposL)/10)*1.5)
	floorGeo.setParameter("Position.X", (floorGeoScaleX/2)*10)
	floorGeo.setParameter("Position.Z", -(min(snapZposL)+max(snapZposL))/2)
	floorGeo.setParameter("Material", "mercury")

#FINALE
scene.enable_GUI_updates(True)
scene.setCurrentFrame((scene.getMinFrame()))

#hide Grid:
scene.executeCommand(120028)
#smooth:
scene.executeCommand(120160)

#floor:(ampliar +radio max value de primera y última serie)
#file selector on first gui form
#enhace cam position Y,Z according to scale values